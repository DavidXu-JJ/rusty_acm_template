#include<iostream>
#include<cmath>
#include<iomanip>
#include<algorithm>
#include<string>
#define ll long long
using namespace std;
const ll maxm=7;
ll a[maxm][maxm]={1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,4,6,4,1,0,0,0,1,3,3,1,0,0,0,0,1,2,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1};
ll danwei[maxm][maxm]={1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1};
class matrix
{
private:
    ll num[maxm][maxm];
public:
    matrix()
    {
        for(int i=0;i<maxm;i++)
        {
            for(int j=0;j<maxm;j++)
            {
                num[i][j]=0;
            }
        }
    }
    ll sum()
    {
        ll sum=0;
        sum+=(num[0][0])%100000007;
        sum=sum%100000007;
        sum+=(num[0][1])%100000007;
        sum=sum%100000007;
        sum+=(16*num[0][2])%100000007;
        sum=sum%100000007;
        sum+=(8*num[0][3])%100000007;
        sum=sum%100000007;
        sum+=(4*num[0][4])%100000007;
        sum=sum%100000007;
        sum+=(2*num[0][5])%100000007;
        sum=sum%100000007;
        sum+=(num[0][6])%100000007;
        sum=sum%100000007;
        return sum;
    }
    matrix(ll cpy[maxm][maxm])
    {
        for(int i=0;i<maxm;i++)
        {
            for(int j=0;j<maxm;j++)
            {
                num[i][j]=*(*(cpy+i)+j);
            }
        }
//        for(int i=0;i<4;i++)
//        {
//            for(int j=0;j<4;j++)
//            {
//                cout<<a[i][j]<<" ";
//            }
//            cout<<endl;
//        }
    }
    friend ostream& operator <<(ostream& out,matrix show)
    {
                for(int i=0;i<maxm;i++)
                {
                    for(int j=0;j<maxm;j++)
                    {
                        cout<<show.num[i][j]<<" ";
                    }
                    cout<<endl;
                }
        return out;
    }
    matrix operator *(matrix &a)
    {
        matrix res;
        for(int i=0;i<maxm;i++)
        for(int j=0;j<maxm;j++)
        for(int k=0;k<maxm;k++)
        res.num[i][j]+=(num[i][k]*a.num[k][j])%100000007;
        return res;
    }
};
//void matrix_multi(ll **a,ll **b,ll **res)
//{
//    res[0][0]=a[0][0]*b[0][0]+a[0][1]*b[1][0]+a[0][2]*b[2][0]+a[0][3]*b[3][0];
//    res[0][1]=a[0][0]*b[0][1]+a[0][1]*b[1][1]+a[0][2]*b[2][1]+a[0][3]*b[3][1];
//    res[0][2]=a[0][0]*b[0][2]+a[0][1]*b[1][2]+a[0][2]*b[2][2]+a[0][3]*b[3][2];
//    res[0][3]=a[0][0]*b[0][3]+a[0][1]*b[1][3]+a[0][2]*b[2][3]+a[0][3]*b[3][3];
//    res[1][0]=a[1][0]*b[0][0]+a[1][1]*b[1][0]+a[1][2]*b[2][0]+a[1][3]*b[3][0];
//    res[1][1]=a[1][0]*b[0][1]+a[1][1]*b[1][1]+a[1][2]*b[2][1]+a[1][3]*b[3][1];
//    res[1][2]=a[1][0]*b[0][2]+a[1][1]*b[1][2]+a[1][2]*b[2][2]+a[1][3]*b[3][2];
//    res[1][3]=a[1][0]*b[0][3]+a[1][1]*b[1][3]+a[1][2]*b[2][3]+a[1][3]*b[3][3];
//    res[2][0]=a[2][0]*b[0][0]+a[2][1]*b[1][0]+a[2][2]*b[2][0]+a[2][3]*b[3][0];
//    res[2][1]=a[2][0]*b[0][1]+a[2][1]*b[1][1]+a[2][2]*b[2][1]+a[2][3]*b[3][1];
//    res[2][2]=a[2][0]*b[0][2]+a[2][1]*b[1][2]+a[2][2]*b[2][2]+a[2][3]*b[3][2];
//    res[2][3]=a[2][0]*b[0][3]+a[2][1]*b[1][3]+a[2][2]*b[2][3]+a[2][3]*b[3][3];
//    res[3][0]=a[3][0]*b[0][0]+a[3][1]*b[1][0]+a[3][2]*b[2][0]+a[3][3]*b[3][0];
//    res[3][1]=a[3][0]*b[0][1]+a[3][1]*b[1][1]+a[3][2]*b[2][1]+a[3][3]*b[3][1];
//    res[3][2]=a[3][0]*b[0][2]+a[3][1]*b[1][2]+a[3][2]*b[2][2]+a[3][3]*b[3][2];
//    res[3][3]=a[3][0]*b[0][3]+a[3][1]*b[1][3]+a[3][2]*b[2][3]+a[3][3]*b[3][3];
//}
matrix qpow(ll r)
{
    matrix res(danwei);
    matrix base(a);
    while(r>0)
    {if(r%2==1)res=res*base;
        base=base*base;
        r/=2;
    }
    return res;
}
int main(){
    ll n;
    while(cin>>n)
    {
        if(n==0)
        {cout<<"1"<<endl;continue;}
        if(n==1)
        {cout<<"1"<<endl;continue;}
        else {cout<<qpow(n-1).sum()<<endl;}
    }

}
